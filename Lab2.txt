% Initialize the graph
V = 8;  % Number of vertices
edgeList = [1, 3; 1, 4; 1, 7; 1, 8; 3, 2; 3, 7; 4, 3; 5, 1; 5, 4; 6, 1; 6, 5; 7, 2; 7, 8; 8, 6];  % Edge list
weights = [4,5,6,8,5,1,2,7,8,3,9,3,1,4];  % Corresponding weights
G = digraph(edgeList(:,1), edgeList(:,2), weights) ;
startVertex = 5;  % Starting vertex

% Run Bellman-Ford to get distances and predecessors
[dist, pred] = BellmanFordPWSSSP(V, edgeList, weights, startVertex);

% Display results
disp('Start Vertex:');
disp(startVertex);
disp('Distances from Start Vertex:');
disp(dist);
disp('Predecessors:');
disp(pred);

% Reconstruct the shortest-path tree using the predecessor array
treeEdges = [];
treeWeights = [];
for v = 1:V
    if pred(v) ~= 0  % If v has a predecessor, it's part of the tree
        treeEdges = [treeEdges; pred(v), v];
        % Find the weight of the edge in the original edge list
        idx = find(edgeList(:,1) == pred(v) & edgeList(:,2) == v);
        treeWeights = [treeWeights; weights(idx)];
    end
end

% Create the shortest-path tree graph
treeGraph = digraph(treeEdges(:,1), treeEdges(:,2), treeWeights);

% Plot the original graph
figure;

plot(G, 'EdgeLabel', G.Edges.Weight);
title('Original Graph');

% Plot the shortest-path tree

plot(treeGraph, 'EdgeLabel', treeGraph.Edges.Weight);
title('Shortest-Path Tree');



Bellman Ford function PWSSSP
function [dist, pred] = BellmanFordPWSSSP(V, edgeList, weights, s)
    % V: number of vertices
    % edgeList: edge list for the weighted graph
    % weights: weight array corresponding to the edges
    % s: source vertex
    
    % Initialize distance and predecessor arrays
    dist = ones(V, 1) * Inf;  % Initialize all distances as infinity
    pred = zeros(V, 1);       % Initialize predecessors as 0 (or -1 for unvisited nodes)
    
    dist(s) = 0;  % Distance from source to itself is 0
    
    % Bellman-Ford main algorithm loop
   for i = 1:V-1
        for j = 1:length(edgeList)
            u = edgeList(j, 1);
            v = edgeList(j, 2);
            w = weights(j);
            if dist(u) + w < dist(v)  % Relax the edge
                dist(v) = dist(u) + w;
                pred(v) = u;  % Record predecessor
            end
        end
    end
end

